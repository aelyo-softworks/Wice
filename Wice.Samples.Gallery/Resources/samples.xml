<samples>
  <sample namespace="Samples.Input.Button.ButtonDockSample">void Layout(Visual parent)
{
    var dock = new Dock();
    dock.Height = 50;
    dock.LastChildFill = false;
    dock.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Olive);
    parent.Children.Add(dock);

    var okButton = new Button();
    okButton.Margin = 10;
    okButton.MinWidth = 70;
    okButton.Click += (s, e) =&gt; MessageBox.Show(parent.Window, "You pressed OK");
    okButton.Text.Alignment = DWRITE_TEXT_ALIGNMENT.DWRITE_TEXT_ALIGNMENT_CENTER;
    okButton.Text.Text = "OK";
    Dock.SetDockType(okButton, DockType.Right);
    dock.Children.Add(okButton);

    var cancelButton = new Button();
    cancelButton.Margin = 3;
    cancelButton.MinWidth = 70;
    cancelButton.Click += (s, e) =&gt; MessageBox.Show(parent.Window, "You pressed Cancel");
    cancelButton.Text.Text = "Cancel";
    cancelButton.Icon.Text = MDL2GlyphResource.Cancel;
    Dock.SetDockType(cancelButton, DockType.Right);
    dock.Children.Add(cancelButton);
}</sample>
  <sample namespace="Samples.Input.Button.SimpleButtonSample">void Layout(Visual parent)
{
    var btn = new Button();
    btn.Click += (s, e) =&gt; MessageBox.Show(parent.Window, "You clicked me!");
    btn.Text.Text = "Click Me!";
    parent.Children.Add(btn);
}</sample>
  <sample namespace="Samples.Input.CheckBox.ThreeStateCheckBoxSample">void Layout(Visual parent)
{
    // stack checkbox and textbox
    var stack = new Stack();
    stack.Orientation = Orientation.Horizontal;
    parent.Children.Add(stack);

    // add nullable checkbox
    var cb = new NullableCheckBox();
    stack.Children.Add(cb);

    // add results textbox
    var results = new TextBox();
    results.Margin = D2D_RECT_F.Thickness(10, 0);
    stack.Children.Add(results);

    cb.Click += (s, e) =&gt;
    {
        if (cb.Value == null)
        {
            results.Text = "CheckBox state is undetermined.";
        }
        else
        {
            results.Text = "CheckBox is " + (cb.Value.Value ? "Checked" : "Unchecked");
        }
    };
}</sample>
  <sample namespace="Samples.Input.CheckBox.TwoStateCheckBoxSample">void Layout(Visual parent)
{
    // stack checkbox and textbox
    var stack = new Stack();
    stack.Orientation = Orientation.Horizontal;
    parent.Children.Add(stack);

    // add checkbox
    var cb = new CheckBox();
    stack.Children.Add(cb);

    // add results textbox
    var results = new TextBox();
    results.Margin = D2D_RECT_F.Thickness(10, 0);
    stack.Children.Add(results);

    cb.Click += (s, e) =&gt;
    {
        results.Text = "CheckBox is " + (cb.Value ? "Checked" : "Unchecked");
    };
}</sample>
  <sample namespace="Samples.Input.RadioButton.RadioButtonsSample">void Layout(Visual parent)
{
    // dock radio button and textbox
    var dock = new Dock();
    parent.Children.Add(dock);

    // add radio buttons with texts
    var rb0 = new RadioButton();
    rb0.Name = "button 0";
    rb0.Margin = D2D_RECT_F.Thickness(10, 0);
    dock.Children.Add(rb0);

    var rb1 = new RadioButton();
    rb1.Name = "button 1";
    rb1.Margin = D2D_RECT_F.Thickness(10, 0);
    dock.Children.Add(rb1);

    var rb2 = new RadioButton();
    rb2.Name = "button 2";
    rb2.Margin = D2D_RECT_F.Thickness(10, 0);
    dock.Children.Add(rb2);

    // add results textbox
    var results = new TextBox();
    results.Margin = D2D_RECT_F.Thickness(10, 0);
    dock.Children.Add(results);

    rb0.Click += onRadioButtonClick;
    rb1.Click += onRadioButtonClick;
    rb2.Click += onRadioButtonClick;

    void onRadioButtonClick(object sender, EventArgs e)
    {
        var rb = (RadioButton)sender;
        results.Text = "Selected RadioButton is " + rb.Name;

        // use a method extension to deselect all other buttons
        new[] { rb0, rb1, rb2 }.Select(rb);
    }
}</sample>
  <sample namespace="Samples.Input.RadioButton.SimpleRadioButtonSample">void Layout(Visual parent)
{
    // stack radio button and textbox
    var stack = new Stack();
    stack.Orientation = Orientation.Horizontal;
    parent.Children.Add(stack);

    // add radio button
    var btn = new RadioButton();
    stack.Children.Add(btn);

    // add results textbox
    var results = new TextBox();
    results.Margin = D2D_RECT_F.Thickness(10, 0);
    stack.Children.Add(results);

    btn.Click += (s, e) =&gt;
    {
        results.Text = "RadioButton is " + (btn.Value ? "Checked" : "Unchecked");
    };
}</sample>
  <sample namespace="Samples.Input.StateButton.CheckBoxStateButtonSample">void Layout(Visual parent)
{
    // stack state button and textbox
    var stack = new Stack();
    stack.Orientation = Orientation.Horizontal;
    parent.Children.Add(stack);

    // add state button
    var btn = new StateButton();
    btn.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Blue);

    // add "true" / checked state
    btn.AddState(new StateButtonState(true, (button, args, state) =&gt; new TextBox
    {
        ForegroundBrush = new SolidColorBrush(_D3DCOLORVALUE.White),
        Text = "X",
        VerticalAlignment = Alignment.Center,
        HorizontalAlignment = Alignment.Center
    })); ;

    // add "false" / unchecked set
    btn.AddState(new StateButtonState(false, (button, args, state) =&gt; new TextBox()));
    btn.Width = 20;
    btn.Height = 20;

    // add results textbox
    var results = new TextBox();
    results.Margin = D2D_RECT_F.Thickness(10, 0);
    results.HorizontalAlignment = Alignment.Center;
    results.VerticalAlignment = Alignment.Center;
    stack.Children.Add(results);

    stack.Children.Add(btn);
    btn.Click += (s, e) =&gt;
    {
        results.Text = "\"CheckBox\" StateButton is " + (((bool)btn.Value) ? "Checked" : "Unchecked");
    };
}</sample>
  <sample namespace="Samples.Input.StateButton.SimpleStateButtonSample">void Layout(Visual parent)
{
    // stack state button and textbox
    var stack = new Stack();
    stack.Orientation = Orientation.Horizontal;
    parent.Children.Add(stack);

    // add state button
    var btn = new StateButton();
    btn.Width = 100;
    btn.Height = 100;
    for (var i = 0; i &lt; 4; i++)
    {
        // second parameter defines the child visual, here just a textbox
        btn.AddState(new StateButtonState("state " + i, (button, args, state) =&gt;
        {
            var tb = new TextBox();
            tb.Text = state.ToString();
            tb.HorizontalAlignment = Alignment.Center;
            tb.VerticalAlignment = Alignment.Center;
            return tb;
        }));
    }

    // select one value
    btn.Value = "state 0";
    btn.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.OldLace);
    stack.Children.Add(btn);

    // add results textbox
    var results = new TextBox();
    results.Margin = D2D_RECT_F.Thickness(10, 0);
    results.HorizontalAlignment = Alignment.Center;
    results.VerticalAlignment = Alignment.Center;
    stack.Children.Add(results);

    btn.Click += (s, e) =&gt;
    {
        results.Text = "StateButton value is " + btn.Value;
    };
}</sample>
  <sample namespace="Samples.Input.ToggleSwitch.GroupedToggleSwitchesSample">void Layout(Visual parent)
{
    // dock toggle switches and textbox
    var dock = new Dock();
    parent.Children.Add(dock);

    // add toggle switches
    var list = new List&lt;ToggleSwitch&gt;();
    for (var i = 0; i &lt; 3; i++)
    {
        var toggle = new ToggleSwitch();
        toggle.Margin = D2D_RECT_F.Thickness(10, 0);
        toggle.Name = "switch " + i;
        dock.Children.Add(toggle);
        list.Add(toggle);
    }

    // add results textbox
    var results = new TextBox();
    results.Margin = D2D_RECT_F.Thickness(10, 0);
    dock.Children.Add(results);

    // hook click events
    list.ForEach(t =&gt; t.Click += onRadioButtonClick);

    void onRadioButtonClick(object sender, EventArgs e)
    {
        var rb = (ToggleSwitch)sender;
        results.Text = "Selected ToggleSwitch is " + rb.Name;

        // use a method extension to deselect all other buttons
        list.Select(rb);
    }
}</sample>
  <sample namespace="Samples.Input.ToggleSwitch.ToggleSwitchSample">void Layout(Visual parent)
{
    // stack state button and textbox
    var stack = new Stack();
    stack.Orientation = Orientation.Horizontal;
    parent.Children.Add(stack);

    // add toggle switch button
    var toggle = new ToggleSwitch();
    stack.Children.Add(toggle);

    // add results textbox
    var results = new TextBox();
    results.Margin = D2D_RECT_F.Thickness(10, 0);
    results.HorizontalAlignment = Alignment.Center;
    results.VerticalAlignment = Alignment.Center;
    stack.Children.Add(results);

    toggle.Click += (s, e) =&gt;
    {
        results.Text = "ToggleSwitch is " + (toggle.Value ? "Checked" : "Unchecked");
    };
}</sample>
  <sample namespace="Samples.Layout.DockSplitter.SimpleDockSplitterSample">void Layout(Visual parent)
{
    var dock = new Dock();
    parent.Children.Add(dock);
    dock.Height = 200;

    var b1 = new Border();
    dock.Children.Add(b1);
    Dock.SetDockType(b1, DockType.Top);
    b1.MinHeight = 20;
    b1.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Red);

    var splitter1 = new DockSplitter();
    splitter1.Name = nameof(splitter1);
    dock.Children.Add(splitter1);
    splitter1.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Yellow);

    var b2 = new Border();
    dock.Children.Add(b2);
    b2.MinHeight = 20;
    Dock.SetDockType(b2, DockType.Bottom);
    b2.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Green);

    var splitter2 = new DockSplitter();
    splitter2.Name = nameof(splitter2);
    dock.Children.Add(splitter2);
    splitter2.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Yellow);

    var b3 = new Border();
    dock.Children.Add(b3);
    b3.MinWidth = 20;
    Dock.SetDockType(b3, DockType.Left);
    b3.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Blue);

    var splitter3 = new DockSplitter();
    splitter3.Name = nameof(splitter3);
    dock.Children.Add(splitter3);
    splitter3.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Yellow);

    var b4 = new Border();
    dock.Children.Add(b4);
    b4.MinWidth = 20;
    Dock.SetDockType(b4, DockType.Right);
    b4.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Orange);

    var splitter4 = new DockSplitter();
    splitter4.Name = nameof(splitter4);
    dock.Children.Add(splitter4);
    splitter4.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Yellow);

    var b5 = new Border();
    dock.Children.Add(b5);
    Dock.SetDockType(b5, DockType.Left);
    b5.MinWidth = 10;
    b5.MinHeight = 10;
    b5.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Violet);
}</sample>
  <sample namespace="Samples.Layout.GridSplitter.SimpleGridSplitterSample">void Layout(Visual parent)
{
}</sample>
  <sample namespace="Samples.Layout.Grid.SimpleGridSample">void Layout(Visual parent)
{
    var grid = new Grid();
    grid.Height = 100;
    grid.Width = 100;
    parent.Children.Add(grid);

    // add 2 columns and 2 rows
    grid.Columns.Add(new GridColumn());
    grid.Columns.Add(new GridColumn());
    grid.Rows.Add(new GridRow());
    grid.Rows.Add(new GridRow());

    var cell0 = new Border();
    grid.Children.Add(cell0);
    cell0.Margin = 10;
    cell0.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Purple);

    var cell1 = new Border();
    grid.Children.Add(cell1);
    cell1.Margin = 10;
    cell1.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Pink);

    Grid.SetColumn(cell1, 2);
    Grid.SetRow(cell1, 2);
}</sample>
  <sample namespace="Samples.Layout.Dock.SimpleDockSample">void Layout(Visual parent)
{
    var canvas = new Canvas();
    canvas.Width = 120;
    canvas.Height = 120;
    canvas.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Gray);
    parent.Children.Add(canvas);

    var b0 = new Border();
    b0.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Red);
    b0.Width= 40;
    b0.Height= 40;
    Canvas.SetLeft(b0, 0);
    Canvas.SetTop(b0, 0);
    canvas.Children.Add(b0);

    var b1 = new Border();
    b1.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Blue);
    b1.Width= 40;
    b1.Height= 40;
    Canvas.SetLeft(b1, 0);
    Canvas.SetBottom(b1, 0);
    canvas.Children.Add(b1);

    var b2 = new Border();
    b2.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Green);
    b2.Width= 40;
    b2.Height= 40;
    Canvas.SetRight(b2, 0);
    Canvas.SetTop(b2, 0);
    canvas.Children.Add(b2);

    var b3 = new Border();
    b3.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Yellow);
    b3.Width= 40;
    b3.Height= 40;
    Canvas.SetRight(b3, 0);
    Canvas.SetBottom(b3, 0);
    canvas.Children.Add(b3);
}</sample>
  <sample namespace="Samples.Layout.Stack.SimpleStackSample">void Layout(Visual parent)
{
    var stack = new Stack();
    parent.Children.Add(stack);
}</sample>
  <sample namespace="Samples.Layout.UniformGrid.SimpleUniformGridSample">void Layout(Visual parent)
{
}</sample>
  <sample namespace="Samples.Layout.Border.BordersSample">void Layout(Visual parent)
{
    var canvas = new Canvas();
    parent.Children.Add(canvas);

    var rnd = new Random(Environment.TickCount);
    for (var i = 0; i &lt; 10; i++)
    {
        var box = new Border();
        // use composition brush
        box.RenderBrush = Compositor.CreateColorBrush(new _D3DCOLORVALUE(rnd.Next(0, int.MaxValue), rnd.NextByte(30)));
        box.Width = rnd.Next(10, 200);
        box.Height = rnd.Next(10, 150);
        canvas.Children.Add(box);
        Canvas.SetLeft(box, rnd.Next(0, 200));
        Canvas.SetTop(box, rnd.Next(0, 100));

        // if you hover the mouse on a box, it's color will change
        box.HoverRenderBrush = Compositor.CreateColorBrush(new _D3DCOLORVALUE(rnd.Next(0, int.MaxValue), rnd.NextByte(30)));
    }
}</sample>
  <sample namespace="Samples.Layout.Border.RoundBorderSample">void Layout(Visual parent)
{
    var border = new Border();
    border.BorderThickness = 2.5f;
    border.CornerRadius = new Vector2(5);
    border.BorderBrush = new SolidColorBrush(_D3DCOLORVALUE.YellowGreen); // well-known colors
    parent.Children.Add(border);

    var textBox = new TextBox();
    textBox.Padding = 10;
    border.Children.Add(textBox);
    textBox.Text = "Text inside a round border";
    textBox.FontSize = 18;
}</sample>
  <sample namespace="Samples.Layout.Border.SimpleBorderSample">void Layout(Visual parent)
{
    var border = new Border();
    border.BorderThickness = 2;
    border.HorizontalAlignment = Alignment.Near; // force border to use child's size (default is Stretch)
    border.BorderBrush = new SolidColorBrush(new _D3DCOLORVALUE(0xFFFFD700)); // by-value color
    parent.Children.Add(border);

    var textBox = new TextBox();
    textBox.Padding = 10;
    border.Children.Add(textBox);
    textBox.Text = "Text inside a border";
    textBox.FontSize = 18;
}</sample>
  <sample namespace="Samples.Layout.Canvas.BoundsCanvasSample">void Layout(Visual parent)
{
    var canvas = new Canvas();
    canvas.Width = 120;
    canvas.Height = 120;
    canvas.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Gray);
    parent.Children.Add(canvas);

    var b0 = new Border();
    b0.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Red);
    b0.Width= 40;
    b0.Height= 40;
    Canvas.SetLeft(b0, 0);
    Canvas.SetTop(b0, 0);
    canvas.Children.Add(b0);

    var b1 = new Border();
    b1.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Blue);
    b1.Width= 40;
    b1.Height= 40;
    Canvas.SetLeft(b1, 0);
    Canvas.SetBottom(b1, 0);
    canvas.Children.Add(b1);

    var b2 = new Border();
    b2.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Green);
    b2.Width= 40;
    b2.Height= 40;
    Canvas.SetRight(b2, 0);
    Canvas.SetTop(b2, 0);
    canvas.Children.Add(b2);

    var b3 = new Border();
    b3.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Yellow);
    b3.Width= 40;
    b3.Height= 40;
    Canvas.SetRight(b3, 0);
    Canvas.SetBottom(b3, 0);
    canvas.Children.Add(b3);
}</sample>
  <sample namespace="Samples.Layout.Canvas.SimpleCanvasSample">void Layout(Visual parent)
{
    var canvas = new Canvas();
    canvas.Width = 120;
    canvas.Height = 120;
    canvas.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Gray);
    parent.Children.Add(canvas);

    var b0 = new Border();
    b0.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Red);
    b0.Width = 40;
    b0.Height = 40;
    Canvas.SetLeft(b0, 0);
    Canvas.SetTop(b0, 0);
    canvas.Children.Add(b0);

    var b1 = new Border();
    b1.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Blue);
    b1.Width = 40;
    b1.Height = 40;
    Canvas.SetLeft(b1, 20);
    Canvas.SetTop(b1, 20);
    canvas.Children.Add(b1);

    var b2 = new Border();
    b2.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Green);
    b2.Width = 40;
    b2.Height = 40;
    Canvas.SetLeft(b2, 40);
    Canvas.SetTop(b2, 40);
    canvas.Children.Add(b2);

    var b3 = new Border();
    b3.RenderBrush = Compositor.CreateColorBrush(_D3DCOLORVALUE.Yellow);
    b3.Width = 40;
    b3.Height = 40;
    Canvas.SetLeft(b3, 60);
    Canvas.SetTop(b3, 60);
    canvas.Children.Add(b3);
}</sample>
  <sample namespace="Samples.Layout.Wrap.SimpleWrapSample">void Layout(Visual parent)
{
    var wrap = new Wrap();
    wrap.Orientation = Orientation.Horizontal;
    parent.Children.Add(wrap);

    var rnd = new Random(Environment.TickCount);
    var max = 100;
    for (var i = 0; i &lt; max; i++)
    {
        var border = new Border();
        wrap.Children.Add(border);
        var color = _D3DCOLORVALUE.FromArgb(rnd.NextByte(), rnd.NextByte(), rnd.NextByte());
        border.RenderBrush = Compositor.CreateColorBrush(color);
        border.Width = rnd.Next(10, 60);
        border.Height = rnd.Next(10, 60);
    }
}</sample>
</samples>